path_data <- "C:/Users/Utilisateur/Documents/GitHub/Projet_linear_time_series" #cb
datafile <- paste(path_data, "valeurs_mensuelles_glaces_et_sorbet.csv", sep = "/") #definit le fichier de donnees
# data <- read.csv(paste(path_data, datafile, sep = "/"),sep=";", header = TRUE) #importe un fichier .csv dans un objet de classe data.frame
datafile
# On importe
data <- read.table(datafile, sep = ";", col.names = c("Date", "Value", "Type"), header = T)
data
# On cut les trois premières lignes et la dernière colonne
data <- data[-1,]
data <- data[-1,]
data <- data[-1,]
data$Type <- NULL
# On visualise
data
## Conversion value to numeric
data$Value <- as.numeric(data$Value)
data$Date <- as.yearmon(seq(from = 1990 + 0/12, to = 2000 + 0/12, by = 1/12))
data
dates <- data$Date
# value <- data$Value
# dates <- as.yearmon(seq(from = 1990 + 0/12, to = 2023 + 0/12, by = 1/12))
value <- zoo(data$Value, order.by = dates)
summary(value)
plot(value)
dates <- data$Date
# value <- data$Value
# dates <- as.yearmon(seq(from = 1990 + 0/12, to = 2023 + 0/12, by = 1/12))
value <- zoo(data$Value, order.by = dates)
############################################################
############### Linear Time Series Project #################
############################################################
### Pr?paration : packages et donn?es
library(readr)
library(data.table)
library(ggplot2)
library(viridis)
library(dplyr)
library(ggpmisc)
library(magrittr)
library(ggpmisc)
library(tibble)
library(dplyr)
library(quantreg)
library(tidyverse)
library(broom)
library(ggpubr)
#install.packages("zoo")
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
#install.packages("tseries")
library(tseries) #diverses fonctions sur les series temporelles
library(fUnitRoots)
# value <- data$Value
# dates <- as.yearmon(seq(from = 1990 + 0/12, to = 2023 + 0/12, by = 1/12))
value <- zoo(data$Value, order.by = dates)
setwd("~/GitHub/Projet_linear_time_series")
# value <- data$Value
# dates <- as.yearmon(seq(from = 1990 + 0/12, to = 2023 + 0/12, by = 1/12))
value <- zoo(data$Value, order.by = dates)
# value <- data$Value
# dates <- as.yearmon(seq(from = 1990 + 0/12, to = 2023 + 0/12, by = 1/12))
value <- zoo(data$Value, order.by = dates)
install.packages("zoo")
install.packages("zoo")
dates <- data$Date
# value <- data$Value
# dates <- as.yearmon(seq(from = 1990 + 0/12, to = 2023 + 0/12, by = 1/12))
value <- zoo(data$Value, order.by = dates)
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
# value <- data$Value
# dates <- as.yearmon(seq(from = 1990 + 0/12, to = 2023 + 0/12, by = 1/12))
value <- zoo(data$Value, order.by = dates)
summary(value)
plot(value)
summary(value)
plot(value)
plot(value)
library(readr)
library(data.table)
library(ggplot2)
library(viridis)
library(dplyr)
library(ggpmisc)
library(magrittr)
library(ggpmisc)
library(tibble)
library(dplyr)
library(quantreg)
library(tidyverse)
library(broom)
library(ggpubr)
library(zoo) #format de serie temporelle pratique et facile d'utilisation (mais plus volumineux)
#install.packages("tseries")
library(tseries) #diverses fonctions sur les series temporelles
library(fUnitRoots)
path_data <- "C:/Users/Benjamin/Desktop/Ensae/Linear_series/Data_project" #bb
path_data <- "C:/Users/Utilisateur/Documents/GitHub/Projet_linear_time_series" #cb
datafile <- paste(path_data, "valeurs_mensuelles_glaces_et_sorbet.csv", sep = "/") #definit le fichier de donnees
# data <- read.csv(paste(path_data, datafile, sep = "/"),sep=";", header = TRUE) #importe un fichier .csv dans un objet de classe data.frame
datafile
# On importe
data <- read.table(datafile, sep = ";", col.names = c("Date", "Value", "Type"), header = T)
data
# On cut les trois premières lignes et la dernière colonne
data <- data[-1,]
data <- data[-1,]
data <- data[-1,]
data$Type <- NULL
# On visualise
data
## Conversion value to numeric
data$Value <- as.numeric(data$Value)
data$Date <- as.yearmon(seq(from = 1990 + 0/12, to = 2000 + 0/12, by = 1/12))
data
dates <- data$Date
# value <- data$Value
# dates <- as.yearmon(seq(from = 1990 + 0/12, to = 2023 + 0/12, by = 1/12))
value <- zoo(data$Value, order.by = dates)
summary(value)
plot(value)
dvalue <- diff(value, 1)
# Pour trouver si on a une trend dans le ADF test
summary(lm(dvalue ~ dates[-1]))
lm(dvalue ~  dates[-1])$coefficients#elle sert ? quoi cette ligne?
# On peut tracer la tendance pour s'en convaincre visuellement
plot(dates[-1], dvalue)
reg <- lm(dvalue ~ dates[-1])
reg
abline(reg,col="red")
adf <- adfTest(dvalue, lag=0, type="c")
adf # pval = 0,01 petite ===> On rejette HO ===> C'est stationnaire OUF
# Pour trouver si on a une trend dans le ADF test
summary(lm(dvalue ~ dates[-1]))
adf <- adfTest(dvalue, lag=0, type="c")
adf # pval = 0,01 petite ===> On rejette HO ===> C'est stationnaire OUF
pp.test(dvalue) # ===> pval petite ===> C'est stationnaire OUF
kpss.test(dvalue, null="Trend")# ===> pval grande ===> C'est stationnaire OUF
null
Facto <- read_excel("Facto.xlsx")
##################### Base d'etude ########################
Var_ACP_2021 <- read_excel("Variables pour ACP 2021.xlsx")
nr)
library(FactoMineR)
library(factoextra)
library(explor)
library(readxl)
library(Factoshiny)
library(gtsumma
library(gtsummary)
library(GGally)
library(Hmisc)
library(dplyr)
library(corrplot)
library(ggplot2)
##################### Base d'etude ########################
Var_ACP_2021 <- read_excel("Variables pour ACP 2021.xlsx")
tab_context <- read.csv2("Table contextuelle au niveau départemental.csv")
Facto <- merge(Var_ACP_2021, tab_context, by.x = "dep_eta", by.y = "codgeo")
Facto_img <- merge(Var_ACP_2021_img, tab_context, by.x = "dep", by.y = "codgeo")
Facto_ivgimg <- merge(Var_ACP_2021, Var_ACP_2021_img, by.x = "dep_eta", by.y = "dep")
####################### ACP IMG ###########################
Var_ACP_2021_img <- read_excel("Variables pour ACP img.xlsx")
Facto_img <- merge(Var_ACP_2021_img, tab_context, by.x = "dep", by.y = "codgeo")
Facto_ivgimg <- merge(Var_ACP_2021, Var_ACP_2021_img, by.x = "dep_eta", by.y = "dep")
Facto_ivgimg <- merge(Facto_ivgimg, tab_context, by.x = "dep_eta", by.y = "codgeo")
#write.csv(Facto_ivgimg, "tab3.csv", sep=",")
Facto_ivgimg <- read.csv2("tab3.csv")
rownames(Facto_ivgimg) <- paste(Facto_ivgimg$dep_eta)
Facto_ivgimg <- Facto_ivgimg[,-1]
for (col in names(Facto_ivgimg)) {
Facto_ivgimg[[col]] <- as.numeric(Facto_ivgimg[[col]])
}
resivgimg<-PCA(Facto_ivgimg, quanti.sup=9:25,graph=FALSE)
plot(resivgimg)
plot.PCA(resivgimg,choix='var',select='contrib  6',unselect=0,title="Graphe des variables de l'ACP",col.quanti.sup='#0000FF')
PCAshiny(resivgimg)
classif <- HCPC(resivgimg, graph = FALSE, nb.clust = 4) #, consol=TRUE
plot(classif)
levels(resivgimg)
View(resivgimg)
#Facto_ivgimg <- merge(Var_ACP_2021, Var_ACP_2021_img, by.x = "dep_eta", by.y = "dep")
#Facto_ivgimg <- merge(Facto_ivgimg, tab_context, by.x = "dep_eta", by.y = "codgeo")
#write.csv(Facto_ivgimg, "tab3.csv", sep=",")
Facto_ivgimg <- read.csv2("tab3.csv")
rownames(Facto_ivgimg) <- paste(Facto_ivgimg$dep_eta)
Facto_num <- Facto_num[, sapply(df, is.numeric)]
resivgimg<-PCA(Facto_num, quanti.sup=9:25,graph=FALSE)
Facto_num <- Facto_ivgimg[, sapply(df, is.numeric)]
resivgimg<-PCA(Facto_num, quanti.sup=9:25,graph=FALSE)
Facto_num <- Facto_ivgimg[, sapply(df, is.numeric)]
resivgimg<-PCA(Facto_num, quanti.sup=9:25,graph=FALSE)
#Facto_ivgimg <- merge(Var_ACP_2021, Var_ACP_2021_img, by.x = "dep_eta", by.y = "dep")
#Facto_ivgimg <- merge(Facto_ivgimg, tab_context, by.x = "dep_eta", by.y = "codgeo")
#write.csv(Facto_ivgimg, "tab3.csv", sep=",")
Facto_ivgimg <- read.csv2("tab3.csv")
rownames(Facto_ivgimg) <- paste(Facto_ivgimg$dep_eta)
Facto_ivgimg <- Facto_ivgimg[,-1]
for (col in names(Facto_ivgimg)) {
Facto_ivgimg[[col]] <- as.numeric(Facto_ivgimg[[col]])
}
Facto_num <- Facto_ivgimg[, sapply(df, is.numeric)]
resivgimg<-PCA(Facto_num, quanti.sup=9:25,graph=FALSE)
#Facto_ivgimg <- merge(Var_ACP_2021, Var_ACP_2021_img, by.x = "dep_eta", by.y = "dep")
#Facto_ivgimg <- merge(Facto_ivgimg, tab_context, by.x = "dep_eta", by.y = "codgeo")
#write.csv(Facto_ivgimg, "tab3.csv", sep=",")
Facto_ivgimg <- read.csv2("tab3.csv")
rownames(Facto_ivgimg) <- paste(Facto_ivgimg$dep_eta)
Facto_ivgimg <- Facto_ivgimg[,-1]
View(Facto_ivgimg)
#Facto_ivgimg <- merge(Var_ACP_2021, Var_ACP_2021_img, by.x = "dep_eta", by.y = "dep")
#Facto_ivgimg <- merge(Facto_ivgimg, tab_context, by.x = "dep_eta", by.y = "codgeo")
#write.csv(Facto_ivgimg, "tab3.csv", sep=",")
Facto_ivgimg <- read.csv2("tab3.csv")
rownames(Facto_ivgimg) <- paste(Facto_ivgimg$dep)
Facto_ivgimg <- Facto_ivgimg[,-1]
for (col in names(Facto_ivgimg)) {
Facto_ivgimg[[col]] <- as.numeric(Facto_ivgimg[[col]])
}
Facto_num <- Facto_ivgimg[, sapply(df, is.numeric)]
#Facto_ivgimg <- merge(Var_ACP_2021, Var_ACP_2021_img, by.x = "dep_eta", by.y = "dep")
#Facto_ivgimg <- merge(Facto_ivgimg, tab_context, by.x = "dep_eta", by.y = "codgeo")
#write.csv(Facto_ivgimg, "tab3.csv", sep=",")
Facto_ivgimg <- read.csv2("tab3.csv")
rownames(Facto_ivgimg) <- paste(Facto_ivgimg$dep)
Facto_ivgimg <- Facto_ivgimg[,-1]
for (col in names(Facto_ivgimg)) {
Facto_ivgimg[[col]] <- as.numeric(Facto_ivgimg[[col]])
}
#Facto_num <- Facto_ivgimg[, sapply(df, is.numeric)]
resivgimg<-PCA(Facto_num, quanti.sup=9:25,graph=FALSE)
#Facto_ivgimg <- merge(Var_ACP_2021, Var_ACP_2021_img, by.x = "dep_eta", by.y = "dep")
#Facto_ivgimg <- merge(Facto_ivgimg, tab_context, by.x = "dep_eta", by.y = "codgeo")
#write.csv(Facto_ivgimg, "tab3.csv", sep=",")
Facto_ivgimg <- read.csv2("tab3.csv")
rownames(Facto_ivgimg) <- paste(Facto_ivgimg$dep)
Facto_ivgimg <- Facto_ivgimg[,-1]
Facto_num <- Facto_ivgimg[, sapply(df, is.numeric)]
resivgimg<-PCA(Facto_num, quanti.sup=9:25,graph=FALSE)
#Facto_ivgimg <- merge(Var_ACP_2021, Var_ACP_2021_img, by.x = "dep_eta", by.y = "dep")
#Facto_ivgimg <- merge(Facto_ivgimg, tab_context, by.x = "dep_eta", by.y = "codgeo")
#write.csv(Facto_ivgimg, "tab3.csv", sep=",")
Facto_ivgimg <- read.csv2("tab3.csv")
rownames(Facto_ivgimg) <- paste(Facto_ivgimg$dep)
Facto_ivgimg <- Facto_ivgimg[,-1]
for (col in names(Facto_ivgimg)) {
Facto_ivgimg[[col]] <- as.numeric(Facto_ivgimg[[col]])
}
resivgimg<-PCA(Facto_num, quanti.sup=9:25,graph=FALSE)
#Facto_ivgimg <- merge(Var_ACP_2021, Var_ACP_2021_img, by.x = "dep_eta", by.y = "dep")
#Facto_ivgimg <- merge(Facto_ivgimg, tab_context, by.x = "dep_eta", by.y = "codgeo")
#write.csv(Facto_ivgimg, "tab3.csv", sep=",")
Facto_ivgimg <- read.csv2("tab3.csv")
rownames(Facto_ivgimg) <- paste(Facto_ivgimg$dep)
Facto_ivgimg <- Facto_ivgimg[,-1]
for (col in names(Facto_ivgimg)) {
Facto_ivgimg[[col]] <- as.numeric(Facto_ivgimg[[col]])
}
resivgimg<-PCA(Facto_ivgimg, quanti.sup=9:25,graph=FALSE)
PCAshiny(resivgimg)
classif <- HCPC(resivgimg, graph = FALSE, nb.clust = 4) #, consol=TRUE
source('~/Oppositions avortement/ACP.R', encoding = 'UTF-8')
#Facto_ivgimg <- merge(Var_ACP_2021, Var_ACP_2021_img, by.x = "dep_eta", by.y = "dep")
#Facto_ivgimg <- merge(Facto_ivgimg, tab_context, by.x = "dep_eta", by.y = "codgeo")
#write.csv(Facto_ivgimg, "tab3.csv", sep=",")
Facto_ivgimg <- read.csv2("tab3.csv")
rownames(Facto_ivgimg) <- paste(Facto_ivgimg$dep)
Facto_ivgimg <- Facto_ivgimg[,-1]
for (col in names(Facto_ivgimg)) {
Facto_ivgimg[[col]] <- as.numeric(Facto_ivgimg[[col]])
}
resivgimg<-PCA(Facto_ivgimg, quanti.sup=9:24,graph=FALSE)
plot(resivgimg)
plot.PCA(resivgimg,choix='var',select='contrib  6',unselect=0,title="Graphe des variables de l'ACP",col.quanti.sup='#0000FF')
classif <- HCPC(resivgimg, graph = FALSE, nb.clust = 4) #, consol=TRUE
PCAshiny(resivgimg)
classif <- HCPC(resivgimg, graph = FALSE, nb.clust = 4) #, consol=TRUE
plot(classif)
classif$data.clust
names(classif$data.clust)
clust <- classif$data.clust
Facto <- cbind(Facto, clust)
Facto <- cbind(Facto, tab_context)
write.csv(Facto, "carte.csv", sep=",")
plot(resivgimg)
plot.PCA(resivgimg,choix='var',select='contrib  6',unselect=0,title="Graphe des variables de l'ACP",col.quanti.sup='#0000FF')
plot.PCA(resivgimg,choix='var',unselect=0,title="Graphe des variables de l'ACP",col.quanti.sup='#0000FF')
########### ACP avec img_horsdep et img_prive #############
matrice_corr <- cor(Facto_ivgimg[1:8], use = "pairwise.complete.obs")
corrplot(matrice_corr, type = "upper", order="hclust")
source('~/Oppositions avortement/ACP.R', encoding = 'UTF-8')
source('~/Oppositions avortement/ACP.R', encoding = 'UTF-8')
